//++++++++++++++++++++++++++ Stack<T>.java ++++++++++++++++++++++++++
import java.util.Vector;
/**
 * A  Stack<T> implementation using Vector.
 *   This implementation associates the "top" of the stack with
 *   the beginning of the Vector (position 0)
 * 
 * @author rdb
 * September 2010
 */

public class Stack<T>
{
    //----------------- instance variables ----------------------------
    private Vector<String> _stack;
    
    //------------------ constructor ---------------------------------
    /** 
     * Constructor. 
     */
    public Stack<T>()
    {
        _stack = new Vector<String>();
    }
    
    //------------------ push ---------------------------------
    /**
     * Push an element onto the stack.
     * @param item String
     */
    public void push( String item )
    {
        _stack.add( 0, item );  // add to start of Vector
    }
    
    //------------------ pop ---------------------------------
    /**
     * Pop and element off the stack.
     * @return String
     */
    public String pop()
    {
        String retVal = null;
        if ( _stack.size() > 0 )
        {
            retVal = _stack.get( 0 );
            _stack.remove( 0 );
        }
        return retVal;
    }   
    //------------------ push2 ---------------------------------
    /**
     * push2 is initially identical to push for now. Later we'll change it.
     * @param item String    item to go onto the stack.
     */
    public void push2( String item )
    {
        //////////////////////////////////////////////////////////////////
        // Step 5a. Revise in Stack.java to add to the end.
        //////////////////////////////////////////////////////////////////
        _stack.add( 0, item );  // add to start of Vector
    }
    
    //------------------ pop2 ---------------------------------
    /**
     * pop2 is initially identical to pop; we'll change it later.
     * @return String
     */
    public String pop2()
    {
        //////////////////////////////////////////////////////////////////
        // Step 5b. Revise in Stack.java to remove from the end.
        //////////////////////////////////////////////////////////////////
        String retVal = null;
        if ( _stack.size() > 0 )
        {
            retVal = _stack.get( 0 );
            _stack.remove( 0 );
        }
        return retVal;
    }
    
    //------------------ isEmpt() --------------------------------- 
    /**
     * Return true if stack is empty.
     * @return boolean
     */
    public boolean isEmpty()
    {
        return _stack.size() == 0;
    }    
    //------------------ size() ---------------------------------
    /**
     * Return the number of elements in the stack.
     * @return int
     */
    public int size()
    {
        return _stack.size();
    }   
    //----------------- toString() -------------------------------
    /** 
     * Return a string representation of the stack.
     * @return String
     */
    public String toString()
    {
        return _stack.toString();
    }
    
    //=======================================================================
    //---------------------------- main -----------------------------
    /**
     * main does some very basic tests.
     * @param args String[]   command line arguments
     */
    public static void main( String[] args )
    {
        boolean timing = true;      
        if ( args.length > 0 )
            timing = false;
        
        Stack<T> test = new Stack<T>();
        
        test.push( "A" );
        test.push( "B" );
        test.push( "C" );
        System.out.println( "Stack should have C,B,A: " + test );
        String c = test.pop();
        System.out.println( "Should have popped C: " + c );
        test.pop();
        test.push( "D" );
        System.out.println( "Stack should have D,A: " + test );
        
        //////////////////////////////////////////////////////////
        // Timing tests
        ////////////////////////////////////////////////////////// 
        if ( timing )
        {
            pushPopTimer();
            pushPop2Timer();
        }
    }
    //--------------- pushPopTimer() --------------------------------
    /**
     * Timing tests for the push/pop implementation.
     */
    private static void pushPopTimer()
    {
        String plusBar = " +++++++++++++++++++++++++++++ ";
        System.out.println( plusBar + "push/pop tests" + plusBar );
        
        ////////////////////////////////////////////////////////////////
        //
        // In Stack.java add time tests for push/pop
        //
        // Steps 4a and 4c
        //
        ////////////////////////////////////////////////////////////////
    }
    //--------------- pushPop2Timer() --------------------------------
    /**
     * Timing tests for the push/pop implementation.
     */
    private static void pushPop2Timer()
    {
        String plusBar = " +++++++++++++++++++++++++++++ ";
        System.out.println( plusBar + "push2/pop2 tests" + plusBar );
        
        ////////////////////////////////////////////////////////////////
        //
        // In Stack.java add time tests for push2/pop2
        //
        // Step 5c.
        //
        ////////////////////////////////////////////////////////////////
    }
    
    //------------------------- timeTest -----------------------------
    /**
     * This method does some very basic performance tests on the implementation.
     *
     * The code pushes a very large number of objects onto the stack and
     * then pops them all off.
     * 
     * Actually it pushes the SAME object onto the stack a large number
     * of times -- this removes the overhead of creating a large number
     * of objects which might muddy the evaluation.
     * 
     * It's not a completely realistic use of a stack, but it is good 
     * enough to do some simple implementation comparisons.
     * @param count int   # of items to push/pop
     */
    private static void timeTest( int count )
    {
        System.out.println( "------------- " + count + " items -------------" );
        Stack<T> stack = new Stack<T>();
        String       sample = new String( "copy" );
        
        long        startTime = System.currentTimeMillis();
        
        for ( int i = 0; i < count; i++ )
            stack.push( sample );
        
        long   pushTime = System.currentTimeMillis() - startTime;
        System.out.println( "Push time = " + ( pushTime / 1000f ) + " secs" );
        
        startTime = System.currentTimeMillis();
        
        while ( ! stack.isEmpty() )
            stack.pop();
        
        long    popTime = System.currentTimeMillis() - startTime;
        System.out.println( "Pop time  = " + ( popTime / 1000f ) + " secs" ); 
    }
    //------------------------- timeTest2 -----------------------------
    /**
     * This method is a copy of timeTest, except that it uses calls to
     * methods: push2 and pop2
     * in order to test alternative implementation strategies.
     * 
     * Because push2 and pop2 are not implemented initially, the
     * comment start after the method definition must be deleted so that
     * the code is "uncommented".
     * @param count int    # items to push/pop
     */   
    private static void timeTest2( int count )
    {        
        System.out.println( "------------- " + count + " items -------------" );
        Stack<T> stack = new Stack<T>();
        String       sample = new String( "copy" );
        
        long        startTime = System.currentTimeMillis();
        
        for ( int i = 0; i < count; i++ )
            stack.push2( sample );
        
        long   pushTime = System.currentTimeMillis() - startTime;
        System.out.println( "Push2 time = " + ( pushTime / 1000f ) + " secs" );
        
        startTime = System.currentTimeMillis();
        
        while ( ! stack.isEmpty() )
            stack.pop2();
        
        long    popTime = System.currentTimeMillis() - startTime;
        System.out.println( "Pop2 time  = " + ( popTime / 1000f ) + " secs" ); 
    }
}